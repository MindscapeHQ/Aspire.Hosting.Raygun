@model ErrorInstanceViewModel

<script src="~/js/htmx.min.js"></script>
<script src="~/js/moment.min.js"></script>
<script src="~/js/signalr.min.js"></script>
<script src="~/js/marked.min.js"></script>
<script src="~/js/prism.js"></script>
<script src="~/js/prism-json.min.js"></script>
<script src="~/js/prism-csharp.min.js"></script>

@{
  string BuildHeading(string className, string message)
  {
    var heading = "";

    if (!string.IsNullOrWhiteSpace(className))
    {
      heading = $"{className}: ";
    }

    if (!string.IsNullOrWhiteSpace(message))
    {
      heading += message;
    }
    else
    {
      heading += "Unknown error";
    }

    return heading;
  }
}

<div class="margin-top--24 margin-bottom--24">
  <div class="error-header">
    <div class="overflow-x--auto">
      <h2 title="@Model?.RaygunMessage?.Details?.Error?.Message" class="error-heading font-opensans--18--28--600 color--color-text-default margin-bottom--12">
        @BuildHeading(Model?.RaygunMessage?.Details?.Error?.ClassName, Model?.RaygunMessage?.Details?.Error?.Message)
      </h2>
      <p id="occurredOnHeading" class="font-opensans--14--32--600 color--color-text-low-emphasis margin-bottom--12">@Model.RaygunMessage.OccurredOn.ToString("MM/dd/yyyy HH:mm:ss")</p>
    </div>
    
    <button id="ai-error-res-btn" class="rg margin-bottom--12" onclick="handleAIChatOpened('@Json.Serialize(@Model?.AierEnabled)')">
      <i id="ai-res-icon" class="ai-small"></i>
      AI Error Resolution
    </button>
  </div>

  <ul class="tab-group clearfix font-opensans--14--32--600 color--color-text-default margin-top--24">
    <li class="js-tab-item tab-group--item tab-group--item--active" hx-get="/ErrorInstance/TabContent" hx-target="#tab-content" hx-trigger="click" hx-vals='{"tab": "summary"}'>Summary</li>
    @if (Model?.RaygunMessage?.Details?.Request != null || Model?.RaygunMessage?.Details?.Response != null)
    {
      <li class="js-tab-item tab-group--item" hx-get="/ErrorInstance/TabContent" hx-target="#tab-content" hx-trigger="click" hx-vals='{"tab": "http"}'>Http</li>
    }
    <li class="js-tab-item tab-group--item tab-group--item-last" hx-get="/ErrorInstance/TabContent" hx-target="#tab-content" hx-trigger="click" hx-vals='{"tab": "rawdata"}'>Raw data</li>
  </ul>
  <div id="tab-and-chat" class="display--flex responsive-flex width--fill-available">
    <div id="tab-content" class="background--color-bg-surface-01 box-shadow--tabs border-color--color-border-elevation border-width--1 border-style--solid width--fill-available">
      <partial name="Tabs/_summary" model="@Model"/>
    </div>
    <div id="ai-chat-container" class="ai-chat-elem background--color-bg-surface-01 box-shadow--tabs border-color--color-border-elevation border-width--1 border-style--solid display--none">
      <partial name="_AIChatWindow"/>
    </div>
  </div>
</div>

<script>
  // Format the occurred on date in the header
  var occurredOnHeading = document.getElementById('occurredOnHeading');
  var rawDate = occurredOnHeading.textContent;
  var momentDateUtc = moment.utc(rawDate, "MM/DD/YYYY HH:mm:ss");

  var formattedDateUtc = momentDateUtc.format("MMMM Do YYYY, HH:mm:ss") + " UTC";
  occurredOnHeading.title = formattedDateUtc

  var momentDateLocal = momentDateUtc.local();
  var formattedDate = momentDateLocal.format("MMMM Do YYYY, HH:mm:ss") + " - " + momentDateLocal.fromNow();
  occurredOnHeading.textContent = formattedDate;

  // Add a click event listener to each tab item
  var elements = document.querySelectorAll('.js-tab-item');
  elements.forEach(function (element) {
    element.addEventListener('click', function () {
      // Remove the 'active' class from all elements
      elements.forEach(function (el) {
        el.classList.remove('tab-group--item--active');
      });

      // Add the 'active' class to the clicked element
      element.classList.add('tab-group--item--active');
    });
  });
</script>

<script>
  let chatSections = ["docs-section", "loading-section", "download-progress-section", "error-section", "messages-list-section"];
  
  let aierInProgress = false;
  let aierContent = '';

  window.addEventListener('beforeunload', function (event) {
    var xhr = new XMLHttpRequest();
    xhr.open('POST', '/ErrorInstance/CancelAier', true);
    xhr.send();
  });

  function handleAIChatOpened(aierEnabled) {
    document.getElementById("tab-content").classList.add("responsive-width--half");

    setChatWindowWidth();
    
    document.addEventListener('htmx:afterSettle', setChatWindowWidth);
    window.addEventListener('resize', setChatWindowWidth);
    window.addEventListener('scroll', setChatWindowWidth);
    
    document.getElementById("ai-chat-container").classList.remove("display--none");

    document.getElementById("ai-error-res-btn").disabled = true;
    document.getElementById("ai-res-icon").style.backgroundColor = "var(--color-text-button-disabled)";


    aierEnabled = (aierEnabled === "true" || aierEnabled === true);

    if (!aierInProgress && aierEnabled) {
      aierInProgress = true;
      aierContent = '';

      showSection("loading-section");

      var xhr = new XMLHttpRequest();
      xhr.open('GET', '/ErrorInstance/StartAier', true);
      xhr.onreadystatechange = function () {
        if (xhr.readyState === 4) { // Request is complete
          var status = xhr.status;

          if (status === 500) {
            showSection("error-section");
          }
        }
      };
      xhr.onerror = function () {
        showSection("error-section");
      };
      xhr.send();
    } else if (!aierEnabled) {
      showSection("docs-section");
    }
  }
  
  function showSection(toDisplay) {
    chatSections.filter(function(item) {
      return item !== toDisplay;
    }).forEach(function(item) {
      document.getElementById(item).classList.add("display--none");
    });
    
    document.getElementById(toDisplay).classList.remove("display--none");
  }
  
  function setChatWindowWidth() {
    var width = $("#tab-content").width();

    // Set the width of the second element
    $("#ai-chat-container").width(width);
  }

</script>

<script>
  const connection = new signalR.HubConnectionBuilder().withUrl("/aierHub").build();

  connection.on("ReceiveText", function (text) {
    showSection("messages-list-section");

    aierContent += text;
    const htmlContent = marked.parse(aierContent);

    var messageList = document.getElementById('messages-list-section');
    messageList.innerHTML = htmlContent;
    
    Prism.highlightAllUnder(messageList);
  });
  
  connection.on("DownloadModelProgress", function (percentage) {
    if (percentage === 100) {
      showSection("loading-section");
    }
    else {
      var progressBar = document.getElementById('download-progress-bar');
      progressBar.style.width = percentage + '%';

      showSection("download-progress-section");
    }
  });

  connection.start().catch(function (err) {
    return console.error(err.toString());
  });
</script>
